import java.util.concurrent.TimeUnit

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

buildscript {
    ext.kotlin_version = '1.3.61'
    repositories {
        google()
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'https://maven.fabric.io/public' }

    }

    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.1'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.7.5'
        classpath 'io.fabric.tools:gradle:1.26.1'
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.3"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-android-extensions:$kotlin_version"
        classpath 'com.google.gms:google-services:4.3.3'
    }
}
android {
    compileSdkVersion 30
    useLibrary 'org.apache.http.legacy'

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
    defaultConfig {
        applicationId "com.sample.airwatchsdk"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        manifestPlaceholders = [appIcon                          : "@mipmap/ic_launcher", appTheme: "@style/AppTheme", certificatePinningStrict: false,
                                certificatePinningRefreshInterval: 1, certificatePinningRefreshIntervalUnit: TimeUnit.DAYS,
                                enableLeakCanary                 : true]
        ndk {
            abiFilters "x86", "x86_64", "armeabi-v7a", "armeabi"
        }
    }

    signingConfigs {
        release {
            if (System.properties["AW_KEYSTORE"]?.trim()) {
                storeFile file(System.properties['AW_KEYSTORE'])
                storePassword System.properties['AW_KEY']
                keyAlias System.properties['KEY_ALIAS']
                keyPassword System.properties['AW_KEY']
            }
        }

        debug {
            if (System.properties["AW_DEBUG_KEYSTORE"]?.trim()) {
                storeFile file(System.properties['AW_DEBUG_KEYSTORE'])
            }
        }
        thirdParty {
            storeFile file("thirdPartyKeyStore.keystore")
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'

        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.debug
        }
        debug {
            signingConfig signingConfigs.debug
            manifestPlaceholders = [certificatePinningRefreshInterval: 1, certificatePinningRefreshIntervalUnit: TimeUnit.MINUTES,
                                    enableLeakCanary                 : false]
        }
        thirdParty {
            signingConfig signingConfigs.thirdParty
        }
    }



    task getBuildTypes {
        doFirst {
            println '--BEGIN--'
            applicationVariants.all { variant ->
                println variant.getBuildType().getName() // this is the value!
            }
        }

        doLast {
            println '--END--'
        }
    }

    flavorDimensions "default"

    productFlavors {
        sith {
            applicationIdSuffix '.sith'
            resValue "string", "app_name", "SITH"
            manifestPlaceholders = [appIcon: "@mipmap/ic_launcher_sith", appTheme: "@style/SecondAppTheme"]
            dimension "default"
        }

        pstore {
            applicationIdSuffix '.pstore'
            resValue "string", "app_name", "PSTORE"
            manifestPlaceholders = [appIcon: "@mipmap/ic_launcher_pstore"]
            dimension "default"
        }

        regular {
            resValue "string", "app_name", "Sample"
            dimension "default"
        }

        strictCertPinning {
            manifestPlaceholders = [appIcon: "@mipmap/ic_launcher", appTheme: "@style/AppTheme", certificatePinningStrict: true]
            dimension "default"
        }

    }
    kotlinOptions {
        jvmTarget = "1.8"
    }

    packagingOptions {
        pickFirst '**/*.so'
    }

}

repositories {
    flatDir { dirs 'libs' }
    maven { url 'https://maven.fabric.io/public' }
}
def privacyVersion = "1.5.0"
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.google.gms.google-services'


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
    implementation ('com.jakewharton:butterknife:10.1.0'){
        exclude group: 'com.google.guava'
    }
    kapt ("com.jakewharton:butterknife-compiler:10.1.0"){
        exclude group: 'com.google.guava'
    }
    implementation 'com.squareup.leakcanary:leakcanary-android:1.5.4'
    implementation('com.crashlytics.sdk.android:crashlytics:2.5.5@aar') {
        exclude group: 'com.google.guava'
        transitive = true
    }
    implementation(name: "AWPrivacy-${privacyVersion}", ext: "aar")
    implementation "androidx.room:room-ktx:2.2.4"
    kapt "androidx.room:room-compiler:2.2.4"
    implementation "com.google.firebase:firebase-messaging:17.3.4"
    implementation 'com.google.firebase:firebase-core:16.0.6'
    implementation 'com.google.firebase:firebase-iid:17.0.4'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.3'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.3'
    implementation 'org.koin:koin-core:2.1.0'
    implementation 'org.koin:koin-android:2.1.0'
    implementation 'org.koin:koin-android-viewmodel:2.1.0'
    //Integrate with sdk:
    implementation 'androidx.multidex:multidex:2.0.0'
    implementation(name: 'VisionUx-1.5.0.a', ext: 'aar')
    implementation 'net.zetetic:android-database-sqlcipher:4.4.1@aar'
    implementation(name: "AirWatchSDK-20.11", ext: "aar") //integrate with framework:
    implementation(name: 'CredentialsExt-102.1.0', ext: 'aar')
    implementation(name: 'AWFramework-20.11', ext: 'aar')
    implementation (name:'ws1-sdk-oauth-api-lib-1.1.0', ext:'aar')
    implementation(name: 'AWNetworkLibrary-20.11', ext: 'aar') {
        exclude group: 'com.google.gson', module: 'gson'
    }
    implementation(name: 'SCEPClient-1.0.14', ext: 'aar')
    implementation(name: 'AWComplianceLibrary-2.3.6', ext: 'aar')
    implementation "com.google.android.gms:play-services-safetynet:17.0.0"
    implementation 'androidx.legacy:legacy-support-v13:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.legacy:legacy-preference-v14:1.0.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0'
    implementation 'androidx.biometric:biometric:1.0.1'
    implementation('androidx.work:work-runtime-ktx:2.3.3') {
        exclude group: 'com.google.guava'
    }
    implementation 'androidx.security:security-crypto:1.0.0-rc02'
    implementation "androidx.lifecycle:lifecycle-runtime:2.2.0"
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    annotationProcessor ("androidx.lifecycle:lifecycle-compiler:2.2.0"){
        exclude group: 'com.google.guava'
    }
    implementation(name:"chameleon-android-1.1.1.8--20201116T093924Z", ext:'aar')
    implementation(name:"settings-1.3.1.6--20201125T115318Z", ext:'aar')
    implementation(name:"opdata-android-1.5.0.3--20201125T162310Z", ext:'aar')
    implementation(name:"module-settings-1.2.0.1--20201125T150536Z", ext:'aar')
    implementation(name:"attributesprovider-1.3.1.6--20201125T115318Z", ext:'aar')
    implementation(name:"ws1-android-logger-1.1.0", ext:'aar')
    implementation(name:"encryptedpreferencesprovider-1.3.1.6--20201125T115318Z", ext:'aar')
    implementation(name:"httpprovider-1.3.1.6--20201125T115318Z", ext:'aar')
    implementation(name:"memoryprovider-1.3.1.6--20201125T115318Z", ext:'aar')
    implementation(name:"supercollider-1.0.7-ndk-r21c", ext:'aar')
    implementation(name:"tunnel-sdk-20.6", ext:'aar')
    //Volley Retrofit Example
    implementation 'com.android.volley:volley:1.1.1'
    implementation('com.squareup.retrofit2:retrofit:2.7.1') {
        // exclude Retrofitâ€™s OkHttp dependency module and define your own module import
        exclude module: 'okhttp'
    }

    implementation('com.squareup.retrofit2:converter-gson:2.7.1') {
        exclude module: 'okhttp'
    }
    implementation('com.squareup.okhttp3:logging-interceptor:3.4.1') {
        exclude module: 'okio'
        exclude module: 'okhttp'
    }

    //picasso
    implementation('com.squareup.picasso:picasso:2.71828') {
        exclude module: 'okhttp'
    }
    implementation('com.jakewharton.picasso:picasso2-okhttp3-downloader:1.1.0') {
        exclude module: 'okhttp'
    }
    implementation("com.squareup.moshi:moshi-kotlin:1.8.0"){
        exclude group: 'com.squareup.okio', module: 'okio'
        exclude group: 'com.squareup.moshi', module: 'moshi'
    }
    kapt "com.squareup.moshi:moshi-kotlin-codegen:1.8.0"


}
